import * as cdk from 'aws-cdk-lib';
import {
  pipelines,
}
from 'aws-cdk-lib';

import * as constructs from 'constructs';
import * as environments from './environments';
import { ExampleStack } from '../exampleStack/exampleStack';

export interface PipelineProps extends cdk.StackProps{
  repo: string;
  branch: string;
  codestarArn: string;
}

export class Pipeline extends cdk.Stack {

  constructor(scope: constructs.Construct, id: string, props: PipelineProps) {
    super(scope, id, props);

    const pipeline = new pipelines.CodePipeline(this, 'Pipeline', {
      crossAccountKeys: true,
      selfMutation: true,
      dockerEnabledForSelfMutation: true,
      dockerEnabledForSynth: true, // we need this to bundle the lambdas with requirements

      // Add permissions for the CodeBuild role to access the secret and KMS key
      synthCodeBuildDefaults: {
        rolePolicy: [
          // Permission to access the secret in the other account
          new cdk.aws_iam.PolicyStatement({
            effect: cdk.aws_iam.Effect.ALLOW,
            actions: ['secretsmanager:GetSecretValue', 'secretsmanager:DescribeSecret'],
            resources: ['arn:aws:secretsmanager:ap-southeast-2:957231369717:secret:npm.pkg.github.com_token-CffBec'],
          }),
          // Permission to use the KMS key that encrypts the secret
          new cdk.aws_iam.PolicyStatement({
            effect: cdk.aws_iam.Effect.ALLOW,
            actions: [
              'kms:Decrypt',
              'kms:DescribeKey',
            ],
            // Ideally, you should specify the exact KMS key ARN if you know it
            resources: ['*'],
            conditions: {
              StringEquals: {
                'aws:ResourceAccount': '957231369717',
              },
            },
          }),
        ],
      },

      synth: new pipelines.ShellStep('Synth', {

       // Use a connection created using the AWS console to authenticate to GitHub
       // Other sources are available.
      input: pipelines.CodePipelineSource.connection(
        props.repo,
        props.branch,
        { connectionArn: props.codestarArn },
       ),
      commands: [
        'TOKEN=`aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:ap-southeast-2:957231369717:secret:npm.pkg.github.com_token-CffBec --region ap-southeast-2 | jq -r ".SecretString"`',
        'npm set "//npm.pkg.github.com/:_authToken=$TOKEN"',
        'yarn install',
        'yarn build',
        'npx cdk synth',
      ],
     }),
   });

   pipeline.addStage(
      new ExampleStage(this, 'dev', {
        env: environments.dev,
      }),
      {
        pre: [
          new pipelines.ManualApprovalStep('DeploytoManagmentAccount'),
       ],
      },
    );
  }
}

class ExampleStage extends cdk.Stage {
  constructor(scope: constructs.Construct, id: string, props?: cdk.StageProps) {
    super(scope, id, props);

    new ExampleStack(this, 'ExampleStack', {
      env: environments.dev,
      name: 'example'
    });
  }
}
